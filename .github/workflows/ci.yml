name: 'Run tests for ci cd'
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  is_package: false # set this to true if you use this template for a package that you want to publish
  publish_docker: false # set this to true if you use this template to build and push a docker file to a registry

jobs:
  test-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-
      - name: Build docker image
        uses: docker/build-push-action@v3
        with:
            context: .
            push: false
            build-args: |
               BUILD=test
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache-new
            tags: "docker-${{ github.sha }}"
      - name: Move cache #  see https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: run tests in docker
        uses: addnab/docker-run-action@v3
        with:
          image: docker-${{ github.sha }}
          run: |
            pip freeze
            pytest -vv
  prep-vars:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - id: set-matrix
        run: |
          echo ::set-output name=matrix::{\"python-version\":${{ env.is_package && '[ "3.7", "3.8", "3.9", "3.10" ]' || '[ "3.10" ]' }} }
          echo ::set-output name=publish_docker::${{env.publish_docker}}
  test:
    runs-on: ubuntu-latest
    needs: prep-vars
    strategy:
      matrix: ${{fromJson(needs.prep-vars.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'
      - name: Install dependencies
        run: pip install -r requirements.txt --update
      - name: Install dev dependencies
        run: pip install -r requirements-dev.txt --update
      - name: Install package
        run: pip install -e .
      - name: show dependencies
        run: pip freeze
      - name: Run tests including flake8 and mypy, etc.
        run: pytest -vv
  build-n-publish:
    name: Build and publish Python üêç distributions üì¶ to PyPI
    runs-on: ubuntu-latest
    needs: [test, test-docker]
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@master
      - name: Set up Python 3.10
        uses: actions/setup-python@v1
        with:
          python-version: 3.10
      - name: Install pypa/build
        run: pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel -outdir dist/
      - name: Publish distribution üì¶ to PyPI
        if: ${{env.is_package}}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          # repository: private_url
  publish-docker:
    name: Publish docker file and push it to a registry
    runs-on: ubuntu-latest
    needs: [test, test-docker, prep-vars]
    if: needs.prep-vars.outputs.publish_docker && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: docker-${GITHUB_REF#refs/tags/}